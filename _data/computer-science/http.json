[{"sort_num":"1","color":"black","type":"text","group":"intro-head","format":"txt","content":"HTTP - lesson 1"},{"sort_num":"2","color":"black","type":"bdi-text","group":"intro-author","format":"txt","content":"src=../../assets/homepage/media/rasmi.jpg , alt = ashkan nasirzadeh اشکان نصیرزاده , name = اشکان نصیرزاده"},{"sort_num":"3","color":"black","type":"img","group":"intro-img","format":"txt","content":"../../assets/computer-science/pics/api.jpg"},{"sort_num":"4","color":"black","type":"bdi-text","group":"para","format":"txt","content":"http یک پروتکل application/level است که برای سیستم های توزیع شده ، مشترک و hypermedia information استفاده می شود . http اساس انتقال داده ها در بستر world wide web (یا اینترنت) از سال ۱۹۹۰ می باشد. این دوره بر اساس مشخصات فنی RFC-2616 میباشد که در مورد HTTP/1.1 می باشد.<br>تفاوت اصلی بین HTTP/1.1 و HTTP/1.0 این است که ورژن قدیمی تر برای هر تبادل request/responce از یک connection جدید استفاده می کرد.<br>"},{"sort_num":"5","color":"black","type":"bdi-text","group":"para","format":"txt","content":"در حقیقت http یک پروتکل تبادل داده ها بر اساس TCP/IP می باشد که برای انتقال دیتا در شبکه ی www استفاه می شود (انتقال عکس ها یا اچ تی ام ال ها یا query results یا ...) ، پورت مفروض TCP 80 می باشد اما پورت های دیگری هم می توانند استفاده بشوند.<br>HTTP مشخص می کند که چگونه داده های درخواست های client ساختار بندی بشوند و به سرور فرستاده بشوند و اینکه چگونه سرور به این درخواست ها پاسخ می دهد.<br>"},{"sort_num":"6","color":"darkorchid","type":"bdi-text","group":"head1","format":"txt","content":"ابزار مورد نیاز"},{"sort_num":"7","color":"darkorchid","type":"bdi-text","group":"para","format":"txt","content":"می توانید از devTools در firefox استفاده کنید.<br>می توانید از &lt;a href=\"https://httpie.org\"&gt;httpie&lt;/a&gt; هم استفاده کنید.<br>"},{"sort_num":"8","color":"darkred","type":"bdi-text","group":"head1","format":"txt","content":"ویژگی های پایه"},{"sort_num":"9","color":"darkred","type":"bdi-text","group":"para","format":"txt","content":"سه ویژگی اساسی وجود دارد که باعث می شود این پروتکل ساده اما قدرتمند باشد:<br>۱- HTTP is connectionless: یک client اچ تی تی پی یک درخواستی رو initiate می کنه و بعد منتظر پاسخش می مونه و بعد که سرور بهش جواب می ده کانکشن رو می بنده در نتیجه سرور و کلاینت فقط روی همون درخواست/پاسخ همدیگه رو میشناسند و درخواست/پاسخ های بعدی روی کانکشن های جدید ایجاد می شوند.<br>۲- HTTP is media independent: یعنی تا زمانی که هم سرور و هم کلاینت بدونن که چجوری محتویات داده ها رو handle کنند هر داده ای می تواند در این بین منتقل شود و لذا هم برای کلاینت و هم برای سرور لازم است که نوع داده ها به وسیله ی MIME-type ها مشخص شود.<br>۳- HTTP is stateless: یعنی امکان نگاه داری اطلاعات بین درخواست های مختلف در طول صفحات وب وجود ندارد (به علت همون مورد اول)<br>"},{"sort_num":"10","color":"darkred","type":"bdi-text","group":"para","format":"txt","content":"دیاگرام زیر یک معماری خیلی پایه ای یک web application را نشان داده و نشان می دهد که HTTP کجا می نشیند:<br>"},{"sort_num":"11","color":"darkred","type":"img","group":"img-style1","format":"txt","content":"src = ../../assets/computer-science/pics/diagram.PNG, alt= , text =&nbsp;"},{"sort_num":"12","color":"darkred","type":"bdi-text","group":"head2","format":"txt","content":"client"},{"sort_num":"13","color":"darkred","type":"bdi-text","group":"para","format":"txt","content":"http client یک درخواست در فرم یک request methode، URI, protocol version که با یک پیام MIME-like که شامل تصیح کننده ی درخواست ، اطلاعات client و possible body content را به سرور می فرستد اون هم روی یک کانکشن TCP/IP"},{"sort_num":"14","color":"darkred","type":"bdi-text","group":"head2","format":"txt","content":"server"},{"sort_num":"15","color":"darkred","type":"bdi-text","group":"para","format":"txt","content":"http server با یک status line پاسخ می دهد که شامل message's protocol version and a success or error code می باشد و در ادامه اش a MIME-like message containing server information, entity meta information, and possible entity-body content آمده است."},{"sort_num":"16","color":"orangered","type":"bdi-text","group":"head1","format":"txt","content":"پارامتر های HTTP"},{"sort_num":"17","color":"orangered","type":"text","group":"code","format":"txt","content":"HTTP-Version   = \"HTTP\" \"/\" 1*DIGIT \".\" 1*DIGIT<br>// e.g. : HTTP/1.1\n<br><br>"},{"sort_num":"18","color":"orangered","type":"text","group":"code","format":"txt","content":"URI = \"http:\" \"//\" host [ \":\" port ] [ abs_path [ \"?\" query ]] \r<br>// empty port =&gt; default port = 80\r<br>// empty abs_path =&gt; default abs_path = /\r<br>// e.g. : http://abc.com:80/~smith/home.html\r<br>// e.g.(same): http://ABC.com/%7Esmith/home.html\r<br>// e.g.(same): http://ABC.com:/%7esmith/home.html\r<br><br>"},{"sort_num":"19","color":"orangered","type":"text","group":"code","format":"txt","content":"Sun, 06 Nov 1994 08:49:37 GMT ; RFC 822, updated by RFC 1123 \r<br>Sunday, 06-Nov-94 08:49:37 GMT ; RFC 850, obsoleted by RFC 1036 \r<br>Sun Nov 6 08:49:37 1994 ; ANSI C's asctime() format\r<br><br>"},{"sort_num":"20","color":"orangered","type":"text","group":"code","format":"txt","content":"US-ASCII\r //default\r<br>\ror\r<br>\rISO-8859-1\r<br>\ror \r<br>ISO-8859-7<br>"},{"sort_num":"21","color":"orangered","type":"text","group":"code","format":"txt","content":"// All content-coding values are case-insensitive<br>Accept-encoding: gzip\r<br>\ror\r<br>\rAccept-encoding: compress\r<br>\ror \r<br>\rAccept-encoding: deflate<br>"},{"sort_num":"22","color":"orangered","type":"text","group":"code","format":"txt","content":"media-type     = type \"/\" subtype *( \";\" parameter )<br>// e.g. : Accept: image/gif<br>// All the Media-type values are registered with the Internet Assigned Number Authority (IANA)<br>"},{"sort_num":"23","color":"tomato","type":"bdi-text","group":"head1","format":"txt","content":"HTTP - Messages"},{"sort_num":"24","color":"tomato","type":"bdi-text","group":"para","format":"txt","content":"یک client http یک برنامه ای هست که یک کانکشن رو با سرور با هدف فرستادن یک یا چند http request message ست آپ می کند. (مثل web browser)<br>یک server http یک برنامه ای هست که کانکشن ها رو می پذیرد با هدف serve کردن به http request به وسیله ی فرستادن http responce message (به طور کلی مثل وب سرور آپاچی یا IIS)<br><br>http از URI برای شناسایی کردن منبع داده شده و برای ست آپ کردن یک کانکشن استفاده می کند و به محض اینکه کانکشن established شد http messages ها با فرمت هایی شبیه با آنچه که استاندارد های RFC3522 و RFC2045 (که مربوط به internet mail و MIME هستند) عبور داده می شوند ، این message ها شامل درخواست های client به سرور پاسخ های server به کلاینت هستند که این message ها با فرمت زیر هستند:<br>"},{"sort_num":"25","color":"tomato","type":"text","group":"code","format":"txt","content":"HTTP-message   = &lt;Request&gt; | &lt;Response&gt; ; HTTP/1.1 messages"},{"sort_num":"26","color":"tomato","type":"bdi-text","group":"para","format":"txt","content":"http request و http responce از یک فرمت عمومی استفاده می کنند (با ضابطه ی RFC822) که این فرمت عمومی شامل ۴ مورد زیر است:<br>"},{"sort_num":"27","color":"tomato","type":"text","group":"para","format":"txt","content":"*A Start-line\n<br>*Zero or more header fields followed by CRLF\n<br>*An empty line (i.e., a line with nothing preceding the CRLF) \n<br>indicating the end of the header fields\n<br>*Optionally a message-body<br>"},{"sort_num":"28","color":"darkgoldenrod","type":"bdi-text","group":"head2","format":"txt","content":"start-line"},{"sort_num":"29","color":"darkgoldenrod","type":"bdi-text","group":"para","format":"txt","content":"به طور کلی سینتکس start-line به شکل زیر است:"},{"sort_num":"30","color":"darkgoldenrod","type":"text","group":"code","format":"txt","content":"start-line = Request-Line | Status-Line<br>// examples:<br>GET /hello.htm HTTP/1.1 #(This is Request-Line sent by the client)<br>HTTP/1.1 200 OK #(This is Status-Line sent by the server)<br>"},{"sort_num":"33","color":"darkseagreen","type":"bdi-text","group":"head2","format":"txt","content":"قسمت هدر ها"},{"sort_num":34,"color":"darkseagreen","type":"bdi-text","group":"para","format":"txt","content":"قسمت هدر ها اطلاعات مورد نیاز در مورد responce یا request یا object send in the message body رو فراهم می کنه و ۴ نوع هدر http داریم :<br>۱- General-header<br>۲- Request-header<br>۳- Response-header<br>۴- Entity-header: که meta information برای body یا در صورتی که body ای نیست اطلاعات در مورد resource ای که request شده رو میده.<br>همه ی انواع هدر های بالا از یک فرمت عمومی استفاده می کنند :<br>"},{"sort_num":35,"color":"darkseagreen","type":"text","group":"code","format":"txt","content":"message-header = field-name \":\" [ field-value ]"},{"sort_num":36,"color":"darkblue","type":"bdi-text","group":"head2","format":"txt","content":"قسمت body"},{"sort_num":37,"color":"darkblue","type":"bdi-text","group":"para","format":"txt","content":"قسمت body برای یک http message یک قسمت دلخواه است اما اگر وجود داشته باشد اطلاعاتی در مورد request یا resource به ما می دهد و دقت کنید که معمولا اگر قسمت body وجود داشته باشد هدر های Content-Type و Content-Length در مورد قسمت body توضیح می دهند.<br>"},{"sort_num":38,"color":"darkseagreen","type":"bdi-text","group":"head1","format":"txt","content":"HTTP Request"},{"sort_num":39,"color":"darkseagreen","type":"bdi-text","group":"para","format":"txt","content":"فرمت http request همان فرمت http request message است که قبلا توضیح دادیم همانطور که قبلا توضیح دادیم قسمت اولش Request-Line می باشد که دارای فرمت زیر است :"},{"sort_num":40,"color":"darkseagreen","type":"text","group":"code","format":"txt","content":"Request-Line = Method SP Request-URI SP HTTP-Version CRLF"},{"sort_num":41,"color":"darkseagreen","type":"bdi-text","group":"para","format":"txt","content":"این فرمت می گه اول متد قرار می گیره (که مثلا می تونه GET یا POST یا DELETE یا PUT یا HEAD یا TRACE یا OPTIONS یا CONNECT باشه) بعدش SP که یک فاصله هستش بعدش REQUEST URI رو داریم که سه حالت داره:&nbsp;<br>۱- * : که به هیچ resource خاصی اشاره نمی کنه بلکه کلا به خود سرور اشاره داره و فقط وقتی قابلیت استفاده داره که از متدی استفاده کنیم که لزوما نیاز به یک resource نداشته باشه<br>"},{"sort_num":42,"color":"darkseagreen","type":"text","group":"code","format":"txt","content":"OPTIONS * HTTP/1.1<br>"},{"sort_num":43,"color":"darkseagreen","type":"bdi-text","group":"para","format":"txt","content":"۲- absoluteURI : وقتی استفاده می شه http request به یک پروکسی فرستاده می شه مثل:\r<br><br>"},{"sort_num":44,"color":"darkseagreen","type":"text","group":"code","format":"txt","content":"GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1<br>"},{"sort_num":45,"color":"darkseagreen","type":"bdi-text","group":"para","format":"txt","content":"۳- و معمول ترین شکل request-uri حالتی است که برای مشخص کردن یک resource روی یک سرور یا gateway استفاده می شود. مثل:"},{"sort_num":46,"color":"darkseagreen","type":"text","group":"code","format":"txt","content":"GET /pub/WWW/TheProject.html HTTP/1.1\r<br>\r<br>Host: www.w3.org<br>"},{"sort_num":47,"color":"darkseagreen","type":"bdi-text","group":"para","format":"txt","content":"دقت کنید که absolute path نمیتونه خالی باشه و اگه original URI خالی باشه باید به شکل \"/\" داده بشود."},{"sort_num":48,"color":"darkseagreen","type":"bdi-text","group":"head2","format":"txt","content":"Request Header Fields"},{"sort_num":49,"color":"darkseagreen","type":"text","group":"para","format":"txt","content":"1- Accept-Charset<br>2- Accept-Encoding<br>3- Accept-Language<br>4- Authorization<br>5- Expect<br>6- Form<br>7- Host<br>8- if-Match<br>9- if-Modified-Since<br>10- if-None-Match<br>11- if-Range<br>12- if-Unmodified-Since<br>13- Max-Forwards<br>14- Proxy-Authorization<br>15- Range<br>16- Referer<br>17- TE<br>18- User-Agent<br>* You can introduce your custom fields<br>"},{"sort_num":50,"color":"darkseagreen","type":"text","group":"code","format":"txt","content":"# Request Message example 1<br>GET /hello.htm HTTP/1.1\r<br>User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)\r<br>Host: www.tutorialspoint.com\r<br>Accept-Language: en-us\r<br>Accept-Encoding: gzip, deflate\r<br>Connection: Keep-Alive<br>"},{"sort_num":51,"color":"darkseagreen","type":"text","group":"code","format":"txt","content":"# Request Message example 2 - The following example shows how to send form data to the server using request message body<br>POST /cgi-bin/process.cgi HTTP/1.1\n<br>User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)\n<br>Host: www.tutorialspoint.com\n<br>Content-Type: application/x-www-form-urlencoded\n<br>Content-Length: length\n<br>Accept-Language: en-us\n<br>Accept-Encoding: gzip, deflate\n<br>Connection: Keep-Alive\n<br>\n<br>licenseID=string&amp;content=string&amp;/paramsXML=string<br>"},{"sort_num":52,"color":"darkseagreen","type":"text","group":"code","format":"txt","content":"# Request Message example 3 - The following example shows how you can pass plain XML to your web server<br>POST /cgi-bin/process.cgi HTTP/1.1\r<br>User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)\r<br>Host: www.tutorialspoint.com\r<br>Content-Type: text/xml; charset=utf-8\r<br>Content-Length: length\r<br>Accept-Language: en-us\r<br>Accept-Encoding: gzip, deflate\r<br>Connection: Keep-Alive\r<br>\r<br>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r<br>&lt;string xmlns=\"http://clearforest.com/\"&gt;string&lt;/string&gt;<br>"},{"sort_num":53,"color":"black","type":"bdi-text","group":"head1","format":"txt","content":"HTTP - Responses"},{"sort_num":54,"color":"black","type":"text","group":"code","format":"txt","content":"Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF<br>HTTP-Version = HTTP/1.1<br>Status-Code = xxx <br># 1xx: Informational<br># 2xx: Success<br># 3xx: Redirection<br># 4xx: Client Error<br># 5xx: Server Error<br>"},{"sort_num":55,"color":"black","type":"bdi-text","group":"head2","format":"txt","content":"Response Header Fields"},{"sort_num":56,"color":"black","type":"bdi-text","group":"para","format":"txt","content":"1- Accept-Ranges<br>2- Age<br>3- ETag<br>4- Location<br>5- Proxy-Authenticate<br>6- Retry-After<br>7- Server<br>8- Vary<br>9- WWW-Authenticate<br>*You can introduce your custom fields in case you are going to write your own custom Web Client and Server.<br>"},{"sort_num":57,"color":"black","type":"bdi-text","group":"head2","format":"txt","content":"examples"},{"sort_num":58,"color":"black","type":"text","group":"code","format":"txt","content":"# Response Message example 1 - HTTP response for a request to fetch the hello.htm page<br>HTTP/1.1 200 OK\r<br>Date: Mon, 27 Jul 2009 12:28:53 GMT\r<br>Server: Apache/2.2.14 (Win32)\r<br>Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT\r<br>Content-Length: 88\r<br>Content-Type: text/html\r<br>Connection: Closed<br><br>&lt;html&gt;\r<br>&lt;body&gt;\r<br>&lt;h1&gt;Hello, World!&lt;/h1&gt;\r<br>&lt;/body&gt;\r<br>&lt;/html&gt;<br>"},{"sort_num":59,"color":"black","type":"text","group":"code","format":"txt","content":"# Response Message example 2 - The following example shows an HTTP response message displaying error condition when the web server could not find the requested page<br>HTTP/1.1 404 Not Found\n<br>Date: Sun, 18 Oct 2012 10:36:20 GMT\n<br>Server: Apache/2.2.14 (Win32)\n<br>Content-Length: 230\n<br>Connection: Closed\n<br>Content-Type: text/html; charset=iso-8859-1\n<br><br>&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;\n<br>&lt;html&gt;\n<br>&lt;head&gt;\n<br>&nbsp; &nbsp;&lt;title&gt;404 Not Found&lt;/title&gt;\n<br>&lt;/head&gt;\n<br>&lt;body&gt;\n<br>&nbsp; &nbsp;&lt;h1&gt;Not Found&lt;/h1&gt;\n<br>&nbsp; &nbsp;&lt;p&gt;The requested URL /t.html was not found on this server.&lt;/p&gt;\n<br>&lt;/body&gt;\n<br>&lt;/html&gt;<br>"},{"sort_num":60,"color":"black","type":"text","group":"code","format":"txt","content":"# Response Message example 3 - Following is an example of HTTP response message showing error condition when the web server encountered a wrong HTTP version in the given HTTP request<br>HTTP/1.1 400 Bad Request\r<br>Date: Sun, 18 Oct 2012 10:36:20 GMT\r<br>Server: Apache/2.2.14 (Win32)\r<br>Content-Length: 230\r<br>Content-Type: text/html; charset=iso-8859-1\r<br>Connection: Closed\r<br>  \r<br>&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;\r<br>&lt;html&gt;\r<br>&lt;head&gt;\r<br>&nbsp; &nbsp;&lt;title&gt;400 Bad Request&lt;/title&gt;\r<br>&lt;/head&gt;\r<br>&lt;body&gt;\r<br>&nbsp; &nbsp;&lt;h1&gt;Bad Request&lt;/h1&gt;\r<br>&nbsp; &nbsp;&lt;p&gt;Your browser sent a request that this server could not understand.&lt;/p&gt;\r<br>&nbsp; &nbsp;&lt;p&gt;The request line contained invalid characters following the protocol string.&lt;/p&gt;\r<br>&lt;/body&gt;\r<br>&lt;/html&gt;<br>"}]