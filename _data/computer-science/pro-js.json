[{"sort_num":1,"color":"black","type":"text","group":"intro-head","format":"txt","content":"pro js points"},{"sort_num":2,"color":"black","type":"img","group":"intro-img","format":"txt","content":"../../assets/computer-science/pics/api.jpg"},{"sort_num":3,"color":"black","type":"bdi-text","group":"intro-author","format":"txt","content":"src=../../assets/homepage/media/rasmi.jpg , alt = ashkan nasirzadeh اشکان نصیرزاده , name = اشکان نصیرزاده"},{"sort_num":4,"color":"black","type":"bdi-text","group":"para","format":"txt","content":"۱- استفاده از ; در نسخه های جدید جاوااسکریپت اختیاری است.<br>۲- اولین بلاک ، نگاه به اسکوپی هست که توش هست بعد به همین ترتیب میره بلاک ها را بالاتر<br>۳- برای یافتن استرینگی در استرینگ دیگر که TRUE یا FALSE به جای INDEX_OF از includes استفاده کن<br>۴- حذف فضا های خالی در استرینگ با مند trim()<br>۵- فقط جایی از let‍ استفاده می کنیم که مطمئن هستیم می خواهیم اون رو تغییر بدیم و اگر نه cons خیلی پرفورمنس بالا تری داره<br>۶- اگر آبجکتی رو به صورت const تعریف کنیم ولی مقادیر و پراپرتی هاشو می تونیم همچنان تغییر بدیم<br>۷- متد unshift به اول آرایه اضافه می کنه و بعکسش shift هست که از اول آرایه کم می کنه<br>۸- متد push به آخر آرایه اضافه می کنه و برعکسش pop از اخر آرایه کم می کنه<br>۹- document یعنی به DOM اشاره دارد<br>۱۰- در سرچ ها از ایونت input استفاده کنید نه keyup<br>۱۱ - جاوااسکریپت از مرورگر تاریخش را می خواند. (let a = new Date)<br>۱۲ - برای تاریخ جلالی از کتابخونه moment استفاده کن (*۵۷*)<br>۱۳ - وقتی که از this استفاده می کنیم دیگر نباید از arrow function ها استفاده کنیم<br>"},{"sort_num":5,"color":"black","type":"text","group":"code","format":"txt","content":"function message () {\r<br>&nbsp; &nbsp; console.log('hello world');\r<br>}<br>----------------------------------------------------<br>let message = function () {\r<br>&nbsp; &nbsp; console.log('hello world');\r<br>}<br>----------------------------------------------------<br>let message = () =&gt; {\r<br>&nbsp; &nbsp; console.log('hello world');\r<br>}<br>"},{"sort_num":6,"color":"black","type":"text","group":"code","format":"txt","content":"// search in an array of objects<br>let items = [\r<br>&nbsp; &nbsp; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book1',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'ali',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; price: '300'\r<br>&nbsp; &nbsp; },\r<br>&nbsp; &nbsp; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book2',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'hosein',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; price: '200'\r<br>&nbsp; &nbsp; },\r<br>&nbsp; &nbsp; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book3',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'ashkan',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; price: 200\r<br>&nbsp; &nbsp; }\r<br>]\r<br>function findItem () {\r<br>&nbsp; &nbsp; let item = items.findIndex((v, i) =&gt; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; return v.title == 'book3'\r<br>&nbsp; &nbsp; })\r<br>&nbsp; &nbsp; return items[item];\r<br>}\r<br>console.log(findItem());<br>"},{"sort_num":7,"color":"black","type":"text","group":"code","format":"txt","content":"// search in array of objects&nbsp;<br>let items = [\n<br>&nbsp; &nbsp; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book1',\n<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'ali',\n<br>&nbsp; &nbsp; &nbsp; &nbsp; price: '300'\n<br>&nbsp; &nbsp; },\n<br>&nbsp; &nbsp; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book2',\n<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'hosein',\n<br>&nbsp; &nbsp; &nbsp; &nbsp; price: '200'\n<br>&nbsp; &nbsp; },\n<br>&nbsp; &nbsp; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book3',\n<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'ashkan',\n<br>&nbsp; &nbsp; &nbsp; &nbsp; price: 200\n<br>&nbsp; &nbsp; }\n<br>]\n<br>function findItem () {\n<br>&nbsp; &nbsp; return items.find((v, i) =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; return v.title == 'book3'\n<br>&nbsp; &nbsp; })\n<br>}\n<br>console.log(findItem());<br>"},{"sort_num":8,"color":"black","type":"text","group":"code","format":"txt","content":"// delete member indexed n of an array:<br>array.splice(n, 1);<br>"},{"sort_num":9,"color":"black","type":"text","group":"code","format":"txt","content":"let items = [\r<br>&nbsp; &nbsp; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book1',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'ali',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; price: '300'\r<br>&nbsp; &nbsp; },\r<br>&nbsp; &nbsp; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book2',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'hosein',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; price: '200'\r<br>&nbsp; &nbsp; },\r<br>&nbsp; &nbsp; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book3',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'ashkan',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; price: 200\r<br>&nbsp; &nbsp; }\r<br>]\r<br>let price200s = items.filter(item =&gt; {\r<br>&nbsp; &nbsp; return item.price == 200;\r<br>})\r<br>console.log(price200s);<br><br>// output:<br>// [\r<br>//&nbsp; &nbsp;{ title: 'book2', name: 'hosein', price: '200' },\r<br>//&nbsp; &nbsp;{ title: 'book3', name: 'ashkan', price: 200 }   \r<br>// ]<br>"},{"sort_num":10,"color":"black","type":"text","group":"code","format":"txt","content":"let items = [\r<br>&nbsp; &nbsp; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book1',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'ali',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; price: 300\r<br>&nbsp; &nbsp; },\r<br>&nbsp; &nbsp; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book2',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'hosein',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; price: 200\r<br>&nbsp; &nbsp; },\r<br>&nbsp; &nbsp; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'book3',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; name: 'ashkan',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; price: 200\r<br>&nbsp; &nbsp; }\r<br>]\r<br>let items2 = items.sort(function (a, b) {\r<br>&nbsp; &nbsp; if (a.price &gt; b.price) return -1;\r<br>&nbsp; &nbsp; else return 1;\r<br>})\r<br>console.log(items2);<br><br>//output:<br>// [\r<br>//&nbsp; &nbsp;{ title: 'book1', name: 'ali', price: 300 },\r<br>//&nbsp; &nbsp;{ title: 'book2', name: 'hosein', price: 200 },\r<br>//&nbsp; &nbsp;{ title: 'book3', name: 'ashkan', price: 200 }\r<br>// ]<br>// hint: <br>// return -1 =&gt; put a before b<br>// return 1 =&gt; put a after b<br>"},{"sort_num":11,"color":"black","type":"text","group":"code","format":"txt","content":"// get a tag (first of all):<br>let p = document.querySelector('p')<br>// get all tags of a kind:<br>let ps = document.querySelectorAll('p')<br>//get an id:<br>document.querySelector('#id')<br>//get some classes:<br>document.querySelectorAll('.class')<br>// remove a tag:<br>p.remove()<br>// get textContent of a tag:<br>p.textContent<br>"},{"sort_num":12,"color":"black","type":"text","group":"code","format":"txt","content":"// get an element from a form:<br>document.querySelector('#form').addEventListener('submit', (e) =&gt; {<br>&nbsp; &nbsp; &nbsp; &nbsp; e.preventDefault()<br>&nbsp; &nbsp; &nbsp; &nbsp; return e.target.elements.formElementName.value<br>})<br>"},{"sort_num":13,"color":"black","type":"text","group":"code","format":"txt","content":"localStorage.setItem('product', 'ashi')\n<br>\n<br>let product = localStorage.getItem('product')\n<br>console.log(product)\n<br>\n<br>localStorage.removeItem('product')\n<br>\n<br>localStorage.clear()<br><br>// reload page by changing storge key example:<br>window.addEventListener('storage', (e) =&gt; {<br>&nbsp; &nbsp; if (e.key === 'example') {}<br>})<br>"},{"sort_num":14,"color":"black","type":"text","group":"code","format":"txt","content":"// change the location of page:<br>location.assign('http://www.google.com')<br>"},{"sort_num":15,"color":"black","type":"text","group":"code","format":"txt","content":"two codes below are equal:<br>----------------------------------------------------<br>const func1 = (item) =&gt; {\r<br>&nbsp; &nbsp; return item\r<br>}<br>----------------------------------------------------<br>const func1 = item =&gt; item<br>"},{"sort_num":16,"color":"black","type":"text","group":"code","format":"txt","content":"// make a constructor<br>const User = function (email) {\r<br>&nbsp; &nbsp; this.username = email\r<br>}\r<br>User.prototype.func1 = function (message) {\r<br>&nbsp; &nbsp; this.message = message\r<br>}\r<br>\r<br>const username1 = new User('ali') \r<br>username1.func1('test')\r<br>console.log(username1)<br>// User { username: 'ali', message: 'test' }<br>"},{"sort_num":17,"color":"black","type":"text","group":"code","format":"txt","content":"// make a constructor with class<br>class User {\r<br>&nbsp; &nbsp; constructor(email) {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; this.email = email\r<br>&nbsp; &nbsp; }\r<br>&nbsp; &nbsp; func1(message) {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; this.message = message\r<br>&nbsp; &nbsp; }\r<br>}\r<br>const username1 = new User('ali')\r<br>username1.func1('test')\r<br>console.log(username1);<br>// User { email: 'ali', message: 'test' }<br>"},{"sort_num":18,"color":"black","type":"text","group":"code","format":"txt","content":"// subclasses :<br>class User {\r<br>&nbsp; &nbsp; constructor(email) {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; this.email = email\r<br>&nbsp; &nbsp; }\r<br>&nbsp; &nbsp; func1(message) {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; this.message = message\r<br>&nbsp; &nbsp; }\r<br>}\r<br>class Job extends User {\r<br>&nbsp; &nbsp; constructor (email, job) {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; super(email)\r<br>&nbsp; &nbsp; &nbsp; &nbsp; this.job = job;\r<br>&nbsp; &nbsp; }\r<br>}\r<br>const username1 = new Job('ali', 'baghkar')\r<br>console.log(username1);<br>"},{"sort_num":19,"color":"black","type":"text","group":"code","format":"txt","content":"// setters and getters<br>// get for return something from object in object.getterFunc mode not object.getterFunc()<br>// set for seting something of object in mode of object.setterFunc = something<br>const products = {\r<br>&nbsp; &nbsp; name: 'book1',\r<br>&nbsp; &nbsp; price: '399',\r<br>&nbsp; &nbsp; set new(stringed) {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; const stringedParts = stringed.split(' ')\r<br>&nbsp; &nbsp; &nbsp; &nbsp; this.name = stringedParts[0]\r<br>&nbsp; &nbsp; &nbsp; &nbsp; this.price = stringedParts[1]\r<br>&nbsp; &nbsp; },\r<br>&nbsp; &nbsp; get info() {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; let stringed = this.name + this.price\r<br>&nbsp; &nbsp; &nbsp; &nbsp; return stringed\r<br>&nbsp; &nbsp; }\r<br>}\r<br>products.new = 'book2 56'\r<br>console.log(products.info);<br>"},{"sort_num":20,"color":"black","type":"text","group":"code","format":"txt","content":"// setters and getters in class\r<br>class product {\r<br>&nbsp; &nbsp; constructor(name) {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; this.name = name\r<br>&nbsp; &nbsp; }\r<br>&nbsp; &nbsp; set addPrice(price) {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; this.price = price\r<br>&nbsp; &nbsp; }\r<br>&nbsp; &nbsp; get info() {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; return `hello world ${this.name}, ${this.price}`\r<br>&nbsp; &nbsp; }\r<br>}\r<br>const product1 = new product('ghablame')\r<br>product1.addPrice = '2000'\r<br>console.log(product1.info);<br>"},{"sort_num":21,"color":"black","type":"text","group":"code","format":"txt","content":"// callback functions\r<br>const aFuncWithCallback = (callback) =&gt; {\r<br>&nbsp; &nbsp; setTimeout(() =&gt; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; console.log('func1')\r<br>&nbsp; &nbsp; &nbsp; &nbsp; callback()\r<br>&nbsp; &nbsp; }, 2000);\r<br>}\r<br>const callbackFunc = () =&gt; {\r<br>&nbsp; &nbsp; console.log('callbackFunc')\r<br>}\r<br>aFuncWithCallback(callbackFunc)\r<br>// output:\r<br>// func1       \r<br>// callbackFunc<br>"},{"sort_num":22,"color":"black","type":"text","group":"code","format":"txt","content":"// Promises\r<br>const aFuncWithPromise = () =&gt; {\r<br>&nbsp; &nbsp; return new Promise ((resolve, reject) =&gt; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; console.log('func1')\r<br>&nbsp; &nbsp; &nbsp; &nbsp; const error = false;\r<br>&nbsp; &nbsp; &nbsp; &nbsp; if (!error) {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resolve()\r<br>&nbsp; &nbsp; &nbsp; &nbsp; } else {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reject('Error has been occured')\r<br>&nbsp; &nbsp; &nbsp; &nbsp; }\r<br>&nbsp; &nbsp; })\r<br>}\r<br>const callbackFunc = () =&gt; {\r<br>&nbsp; &nbsp; console.log('callbackFunc')\r<br>}\r<br>aFuncWithPromise().then(callbackFunc)\r<br>// output:\r<br>// func1       \r<br>// callbackFunc<br>"},{"sort_num":23,"color":"black","type":"text","group":"code","format":"txt","content":"// Promises and async await\r<br>const aFuncWithPromise = () =&gt; {\r<br>&nbsp; &nbsp; return new Promise ((resolve, reject) =&gt; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; setTimeout(() =&gt; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log('func1')\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const error = false;\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!error) {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resolve()\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } else {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reject('Error has been occured')\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\r<br>&nbsp; &nbsp; &nbsp; &nbsp; }, 3000);\r<br>&nbsp; &nbsp; })\r<br>}\r<br>const callbackFunc = () =&gt; {\r<br>&nbsp; &nbsp; setTimeout(() =&gt; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; console.log('callbackFunc')\r<br>&nbsp; &nbsp; }, 2000);\r<br>}\r<br>async function todo () {\r<br>&nbsp; &nbsp; await aFuncWithPromise();\r<br>&nbsp; &nbsp; callbackFunc();\r<br>}\r<br>todo();\r<br>// output:\r<br>// func1       \r<br>// callbackFunc<br>"},{"sort_num":24,"color":"black","type":"text","group":"code","format":"txt","content":"// app.js AJAX with javascript and promises get data from api<br>const getbtn = document.querySelector('#getbtn')\n<br>const postbtn = document.querySelector('#postbtn')\n<br>\n<br>const sendHttpRequest = (method, url) =&gt; {\n<br>&nbsp; &nbsp; const promise = new Promise ((resolve, reject) =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; const xhr = new XMLHttpRequest()\n<br>&nbsp; &nbsp; &nbsp; &nbsp; xhr.open(method, url)\n<br>&nbsp; &nbsp; &nbsp; &nbsp; xhr.responseType = 'json'\n<br>&nbsp; &nbsp; &nbsp; &nbsp; xhr.onload = () =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resolve(xhr.response)\n<br>&nbsp; &nbsp; &nbsp; &nbsp; }\n<br>&nbsp; &nbsp; &nbsp; &nbsp; xhr.onerror = () =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reject('Error')\n<br>&nbsp; &nbsp; &nbsp; &nbsp; }\n<br>&nbsp; &nbsp; &nbsp; &nbsp; xhr.send()\n<br>&nbsp; &nbsp; })\n<br>&nbsp; &nbsp; return promise\n<br>}\n<br>\n<br>const getData = () =&gt; {\n<br>&nbsp; &nbsp; sendHttpRequest('GET', 'https://jsonplaceholder.typicode.com/posts/1')\n<br>&nbsp; &nbsp; &nbsp; &nbsp; .then(response =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(response)\n<br>&nbsp; &nbsp; &nbsp; &nbsp; })\n<br>&nbsp; &nbsp; &nbsp; &nbsp; .catch(e =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(e)\n<br>&nbsp; &nbsp; &nbsp; &nbsp; })\n<br>}\n<br>const postData = () =&gt; {\n<br>\n<br>}\n<br>\n<br>getbtn.addEventListener('click', getData)\n<br>postbtn.addEventListener('click', postData)<br>"},{"sort_num":25,"color":"black","type":"text","group":"code","format":"txt","content":"// app.js AJAX with javascript and promises post data to api added<br>const getbtn = document.querySelector('#getbtn')\n<br>const postbtn = document.querySelector('#postbtn')\n<br>\n<br>const sendHttpRequest = (method, url, data) =&gt; {\n<br>&nbsp; &nbsp; const promise = new Promise ((resolve, reject) =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; const xhr = new XMLHttpRequest()\n<br>&nbsp; &nbsp; &nbsp; &nbsp; xhr.open(method, url)\n<br>&nbsp; &nbsp; &nbsp; &nbsp; xhr.responseType = 'json'\n<br>&nbsp; &nbsp; &nbsp; &nbsp; if (data) {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xhr.setRequestHeader('Content-Type', 'application/json')\n<br>&nbsp; &nbsp; &nbsp; &nbsp; }\n<br>&nbsp; &nbsp; &nbsp; &nbsp; xhr.onload = () =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resolve(xhr.response)\n<br>&nbsp; &nbsp; &nbsp; &nbsp; }\n<br>&nbsp; &nbsp; &nbsp; &nbsp; xhr.onerror = () =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reject('Error')\n<br>&nbsp; &nbsp; &nbsp; &nbsp; }\n<br>&nbsp; &nbsp; &nbsp; &nbsp; xhr.send(JSON.stringify(data))\n<br>&nbsp; &nbsp; })\n<br>&nbsp; &nbsp; return promise\n<br>}\n<br>\n<br>const getData = () =&gt; {\n<br>&nbsp; &nbsp; sendHttpRequest('GET', 'https://jsonplaceholder.typicode.com/posts/1')\n<br>&nbsp; &nbsp; &nbsp; &nbsp; .then(response =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(response)\n<br>&nbsp; &nbsp; &nbsp; &nbsp; })\n<br>&nbsp; &nbsp; &nbsp; &nbsp; .catch(e =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(e)\n<br>&nbsp; &nbsp; &nbsp; &nbsp; })\n<br>}\n<br>const postData = () =&gt; {\n<br>&nbsp; &nbsp; sendHttpRequest('POST', 'https://jsonplaceholder.typicode.com/posts', {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; userId: 2,\n<br>&nbsp; &nbsp; &nbsp; &nbsp; id: 2,\n<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'Post Title',\n<br>&nbsp; &nbsp; &nbsp; &nbsp; body: 'post body kia'\n<br>&nbsp; &nbsp; }).then(res =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; console.log(res)\n<br>&nbsp; &nbsp; }).catch(e =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; console.log(e)\n<br>&nbsp; &nbsp; })\n<br>}\n<br>\n<br>getbtn.addEventListener('click', getData)\n<br>postbtn.addEventListener('click', postData)\n<br><br>"},{"sort_num":26,"color":"black","type":"text","group":"code","format":"txt","content":"// app.js Ajax api with fetch - GET data<br>const getbtn = document.querySelector('#getbtn')\n<br>const postbtn = document.querySelector('#postbtn')\n<br>\n<br>const sendhttpRequest = (method, url, data) =&gt; {\n<br>&nbsp; &nbsp; return fetch(url)\n<br>&nbsp; &nbsp; &nbsp; &nbsp; .then(res =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return res.json()\n<br>&nbsp; &nbsp; &nbsp; &nbsp; })\n<br>}\n<br>\n<br>const getData = () =&gt; {\n<br>&nbsp; &nbsp; sendhttpRequest('GET', 'https://jsonplaceholder.typicode.com/posts/1')\n<br>&nbsp; &nbsp; &nbsp; &nbsp; .then(res =&gt; {\n<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(res)\n<br>&nbsp; &nbsp; &nbsp; &nbsp; })\n<br>}\n<br>const postData = () =&gt; {\n<br>\n<br>}\n<br>\n<br>getbtn.addEventListener('click', getData)\n<br>postbtn.addEventListener('click', postData)\n<br><br>"},{"sort_num":27,"color":"black","type":"text","group":"code","format":"txt","content":"// app.js Ajax api with fetch - post data\r<br>const getbtn = document.querySelector('#getbtn')\r<br>const postbtn = document.querySelector('#postbtn')\r<br>\r<br>const sendhttpRequest = (method, url, data) =&gt; {\r<br>&nbsp; &nbsp; return fetch(url, {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; method: method,\r<br>&nbsp; &nbsp; &nbsp; &nbsp; body: JSON.stringify(data),\r<br>&nbsp; &nbsp; &nbsp; &nbsp; headers: data ? { 'Content-Type': 'application/json'} : {}\r<br>&nbsp; &nbsp; })\r<br>&nbsp; &nbsp; &nbsp; &nbsp; .then(res =&gt; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return res.json()\r<br>&nbsp; &nbsp; &nbsp; &nbsp; })\r<br>}\r<br>\r<br>const getData = () =&gt; {\r<br>&nbsp; &nbsp; sendhttpRequest('GET', 'https://jsonplaceholder.typicode.com/posts/1')\r<br>&nbsp; &nbsp; &nbsp; &nbsp; .then(res =&gt; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(res)\r<br>&nbsp; &nbsp; &nbsp; &nbsp; })\r<br>}\r<br>const postData = () =&gt; {\r<br>&nbsp; &nbsp; sendhttpRequest('POST', 'https://jsonplaceholder.typicode.com/posts', {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; userId: 2,\r<br>&nbsp; &nbsp; &nbsp; &nbsp; id: 2,\r<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'ali',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; body: 'Post body ashi'\r<br>&nbsp; &nbsp; }).then(res =&gt; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; console.log(res)\r<br>&nbsp; &nbsp; })\r<br>}\r<br>\r<br>getbtn.addEventListener('click', getData)\r<br>postbtn.addEventListener('click', postData)\r<br><br>"},{"sort_num":28,"color":"black","type":"text","group":"code","format":"txt","content":"// app.js Ajax api with axios\r<br>const getbtn = document.querySelector('#getbtn')\r<br>const postbtn = document.querySelector('#postbtn')\r<br>\r<br>const getData = () =&gt; {\r<br>&nbsp; &nbsp; axios.get('https://jsonplaceholder.typicode.com/posts/1')\r<br>&nbsp; &nbsp; &nbsp; &nbsp; .then(res =&gt; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(res)\r<br>&nbsp; &nbsp; &nbsp; &nbsp; })\r<br>}\r<br>const postData = () =&gt; {\r<br>&nbsp; &nbsp; axios.post('https://jsonplaceholder.typicode.com/posts', {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; userId: 2,\r<br>&nbsp; &nbsp; &nbsp; &nbsp; id: 2,\r<br>&nbsp; &nbsp; &nbsp; &nbsp; title: 'ali',\r<br>&nbsp; &nbsp; &nbsp; &nbsp; body: 'gholi'\r<br>&nbsp; &nbsp; })\r<br>&nbsp; &nbsp; &nbsp; &nbsp; .then(res =&gt; {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(res)\r<br>&nbsp; &nbsp; &nbsp; &nbsp; })\r<br>}\r<br>\r<br>getbtn.addEventListener('click', getData)\r<br>postbtn.addEventListener('click', postData)\r<br><br>"}]